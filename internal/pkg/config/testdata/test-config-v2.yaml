# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# metadata contains broad analysis configuration beyond the identification of
# key taint-propagation elements.
# These are intended as examples, not necessarily intended to represent explicit intent.
metadata:
  # For instance, a flag to warn if a spec would identify no elements, suggesting configuration is stale.
  validateConfig: true
  # Analysis runs on the transitive closure of import dependencies.
  # We may wish to explicitly skip those packages which import "testing" or have been otherwise sanctified.
  scope:
    skip:
    - imports: testing
    - package: my/special/pkg

# Identification of taint-propagation elements is done by value or by function call
sources:
- value:
    # The specific type and field .../rest.TLSClientConfig.Password is a source
    id: "Core Source"
    package: ^k8s.io/client-go/rest$
    type: ^TLSClientConfig$
    field: Password
- value:
    # `levee:”source”` should be default, but additional tags
    # should be configurable
    fieldtags:
      - myTag: source
      - myTag: otherSource
- call:
    # The value returned by os.Getenv("CFSSL_CA_PK_PASSWORD") is sensitive
    id: "sensitive environment information"
    package: os
    function: Getenv
    arguments:
    - value:
        position: 0
        const: CFSSL_CA_PK_PASSWORD

sinks:
- call:  &println-sink
    id: "don't print"
    package: fmt
    function: Println
    unless:
      - context:
          package: my/sanctioned/package
- value:
    id: "Sink function member"
    package: path/to/my/sinker/pkg
    type: MySinker
    field: SinkField

# An allow-list is distinct from an identification's .unless field in intent
# This allow-list represents false-positive suppression, not intended avoidance.
allowlist:
- call:
    <<: *println-sink                        # YAML Anchor expansion sets 'id', 'package', 'function', 'unless'
    id: "Ignore prints in third_party/pkg"   # overwrite 'id'
    context:                                 # add context
      package:  third_party/pkg
      function: falsePositiveProducer
- call:
    id: "Sink function member"
    context:
      package: path/to/my/sinker/pkg
      function: SafeSink
      receiver: MySinker
